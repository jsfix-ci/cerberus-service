---
kind: pipeline
type: kubernetes
name: default

platform:
  os: linux
  arch: amd64

steps:
- name: sync_dev_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: DEV_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: DEV_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: dev
    DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_V1_PUBLIC_TOKEN
    DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
  when:
    event:
    - promote
    target:
    - dev_secrets

- name: sync_sit_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: SIT_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: SIT_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: sit
    DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_V1_PUBLIC_TOKEN
    DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
  when:
    event:
    - promote
    target:
    - sit_secrets

- name: sync_staging_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: STAGING_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: STAGING_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: staging
    DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_V1_PUBLIC_TOKEN
    DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
  when:
    event:
    - promote
    target:
    - staging_secrets

- name: sync_production_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: PRODUCTION_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: PRODUCTION_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: production
    DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_V1_PUBLIC_TOKEN
    DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
  when:
    event:
    - promote
    target:
    - production_secrets

- name: unit_tests
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-node:12-alpine
  commands:
  - node -v
  - npm -v
  - npm ci --legacy-peer-deps
  - npm run test
  when:
    event:
    - push

- name: linting
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-node:12-alpine
  commands:
  - npm run lint -- .
  when:
    event:
    - push

- name: build
  pull: always
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  commands:
  - n=0; while [ "$n" -lt 60 ] && (! docker stats --no-stream &>/dev/null); do n=$(( n + 1 )); sleep 1; done
  - docker build -t cerberus-ui-service:$${DRONE_COMMIT_SHA} .
  when:
    event:
    - push

- name: vulnerability-scan
  pull: always
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
  environment:
    DOCKERFILE: Dockerfile
    IMAGE_NAME: cerberus-ui-service:${DRONE_COMMIT_SHA}
    LOCAL_IMAGE: true
    TOLERATE: low
    WHITELIST_FILE: whitelist
  when:
    event:
    - push

- name: sonarqube_scan
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/sonar-scanner-node:latest
  when:
    event:
    - push

- name: image_to_quay
  image: plugins/docker
  settings:
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/cerberus-ui-service
    tags: ${DRONE_COMMIT_SHA}
  environment:
    DOCKER_PASSWORD:
      from_secret: QUAY_PASSWORD
    DOCKER_USERNAME:
      from_secret: QUAY_USERNAME
  when:
    branch:
    - release-candidate
    event:
    - push

- name: deploy_to_dev
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export CERBERUS_UI_TAG=$${DRONE_COMMIT_SHA}
  - echo -e $${KUBE_CA_CERT} > k8s.crt
  - export KUBE_CERTIFICATE_AUTHORITY="$${PWD}/k8s.crt"
  - kd --file kube/cert.yml
  - kd --file kube/network-policy.yml
  - kd --file kube/service.yml
  - kd --file kube/deployment.yml --timeout=15m
  - kd --file kube/ingress.yml
  environment:
    CERBERUS_UI_IMAGE: quay.io/ukhomeofficedigital/cerberus-ui-service
    CERBERUS_UI_PORT: 8080
    CERBERUS_UI_SERVICE_NAME:
      from_secret: DEV_CERBERUS_UI_SERVICE_NAME
    CERBERUS_UI_URL:
      from_secret: DEV_CERBERUS_UI_SERVICE_URL
    CERBERUS_WORKFLOW_SERVICE_NAME:
      from_secret: WORKFLOW_SERVICE_NAME
    CERBERUS_WORKFLOW_SERVICE_NAMESPACE:
      from_secret: DEV_KUBE_NAMESPACE_COP_CERBERUS
    COP_TARGETING_API_ENABLED: 'true'
    COP_TARGETING_API_NAMESPACE:
      from_secret: DEV_KUBE_NAMESPACE_COP_CERBERUS
    COP_TARGETING_API_SERVICE_NAME:
      from_secret: DEV_COP_TARGETING_API_SERVICE_NAME
    DEPLOY_ENV: dev
    FILE_UPLOAD_SERVICE_URL:
      from_secret: DEV_FILE_UPLOAD_SERVICE_URL
    FORM_API_URL:
      from_secret: DEV_API_FORM_URL
    KEYCLOAK_AUTH_URL:
      from_secret: DEV_KEYCLOAK_URL
    KEYCLOAK_CLIENT_ID:
      from_secret: DEV_CERBERUS_UI_SERVICE_KEYCLOAK_CLIENT_ID
    KEYCLOAK_REALM:
      from_secret: DEV_KEYCLOAK_REALM
    KUBE_CA_CERT:
      from_secret: DEV_KUBE_CA_CERT
    KUBE_NAMESPACE:
      from_secret: DEV_KUBE_NAMESPACE_COP_CERBERUS
    KUBE_SERVER:
      from_secret: DEV_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: DEV_CERBERUS_KUBE_TOKEN
    NGINX_CONFIG_FILE: /etc/nginx/nginx.conf
    NGINX_IMAGE:
      from_secret: NGINX_IMAGE
    NGINX_TAG:
      from_secret: NGINX_TAG
    REFDATA_API_URL:
      from_secret: DEV_REFDATA_API_URL
    RORO_V2_VIEW_ENABLED: 'true'
  when:
    branch:
    - release-candidate
    - roro-v2-migration
    event:
    - push

- name: deploy_to_sit
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export CERBERUS_UI_TAG=$${DRONE_COMMIT_SHA}
  - echo -e $${KUBE_CA_CERT} > k8s.crt
  - export KUBE_CERTIFICATE_AUTHORITY="$${PWD}/k8s.crt"
  - kd --file kube/cert.yml
  - kd --file kube/network-policy.yml
  - kd --file kube/service.yml
  - kd --file kube/deployment.yml --timeout=5m
  - kd --file kube/ingress.yml
  environment:
    CERBERUS_UI_IMAGE: quay.io/ukhomeofficedigital/cerberus-ui-service
    CERBERUS_UI_PORT: 8080
    CERBERUS_UI_SERVICE_NAME:
      from_secret: SIT_CERBERUS_UI_SERVICE_NAME
    CERBERUS_UI_URL:
      from_secret: SIT_CERBERUS_UI_SERVICE_URL
    CERBERUS_WORKFLOW_SERVICE_NAME:
      from_secret: WORKFLOW_SERVICE_NAME
    CERBERUS_WORKFLOW_SERVICE_NAMESPACE:
      from_secret: SIT_KUBE_NAMESPACE_COP_CERBERUS
    COP_TARGETING_API_ENABLED: 'false'
    COP_TARGETING_API_NAMESPACE:
      from_secret: SIT_KUBE_NAMESPACE_COP_CERBERUS
    COP_TARGETING_API_SERVICE_NAME:
      from_secret: SIT_COP_TARGETING_API_SERVICE_NAME
    DEPLOY_ENV: sit
    FILE_UPLOAD_SERVICE_URL:
      from_secret: SIT_FILE_UPLOAD_SERVICE_URL
    FORM_API_URL:
      from_secret: SIT_API_FORM_URL
    KEYCLOAK_AUTH_URL:
      from_secret: SIT_KEYCLOAK_URL
    KEYCLOAK_CLIENT_ID:
      from_secret: SIT_CERBERUS_UI_SERVICE_KEYCLOAK_CLIENT_ID
    KEYCLOAK_REALM:
      from_secret: SIT_KEYCLOAK_REALM
    KUBE_CA_CERT:
      from_secret: SIT_KUBE_CA_CERT
    KUBE_NAMESPACE:
      from_secret: SIT_KUBE_NAMESPACE_COP_CERBERUS
    KUBE_SERVER:
      from_secret: SIT_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: SIT_CERBERUS_KUBE_TOKEN
    NGINX_CONFIG_FILE: /etc/nginx/nginx.conf
    NGINX_IMAGE:
      from_secret: NGINX_IMAGE
    NGINX_TAG:
      from_secret: NGINX_TAG
    REFDATA_API_URL:
      from_secret: SIT_REFDATA_API_URL
    RORO_V2_VIEW_ENABLED: 'false'
  when:
    branch:
    - release-candidate
    event:
    - promote
    target:
    - sit

- name: deploy_to_staging
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export CERBERUS_UI_TAG=$${DRONE_COMMIT_SHA}
  - echo -e $${KUBE_CA_CERT} > k8s.crt
  - export KUBE_CERTIFICATE_AUTHORITY="$${PWD}/k8s.crt"
  - kd --file kube/cert.yml
  - kd --file kube/network-policy.yml
  - kd --file kube/service.yml
  - kd --file kube/deployment.yml --timeout=5m
  - kd --file kube/ingress.yml
  environment:
    CERBERUS_UI_IMAGE: quay.io/ukhomeofficedigital/cerberus-ui-service
    CERBERUS_UI_PORT: 8080
    CERBERUS_UI_SERVICE_NAME:
      from_secret: STAGING_CERBERUS_UI_SERVICE_NAME
    CERBERUS_UI_URL:
      from_secret: STAGING_CERBERUS_UI_SERVICE_URL
    CERBERUS_WORKFLOW_SERVICE_NAME:
      from_secret: WORKFLOW_SERVICE_NAME
    CERBERUS_WORKFLOW_SERVICE_NAMESPACE:
      from_secret: STAGING_KUBE_NAMESPACE_COP_CERBERUS
    COP_TARGETING_API_ENABLED: 'false'
    COP_TARGETING_API_NAMESPACE:
      from_secret: STAGING_KUBE_NAMESPACE_COP_CERBERUS
    COP_TARGETING_API_SERVICE_NAME:
      from_secret: STAGING_COP_TARGETING_API_SERVICE_NAME
    DEPLOY_ENV: staging
    FILE_UPLOAD_SERVICE_URL:
      from_secret: STAGING_FILE_UPLOAD_SERVICE_URL
    FORM_API_URL:
      from_secret: STAGING_API_FORM_URL
    KEYCLOAK_AUTH_URL:
      from_secret: STAGING_KEYCLOAK_URL
    KEYCLOAK_CLIENT_ID:
      from_secret: STAGING_CERBERUS_UI_SERVICE_KEYCLOAK_CLIENT_ID
    KEYCLOAK_REALM:
      from_secret: STAGING_KEYCLOAK_REALM
    KUBE_CA_CERT:
      from_secret: STAGING_KUBE_CA_CERT
    KUBE_NAMESPACE:
      from_secret: STAGING_KUBE_NAMESPACE_COP_CERBERUS
    KUBE_SERVER:
      from_secret: STAGING_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: STAGING_CERBERUS_KUBE_TOKEN
    NGINX_CONFIG_FILE: /etc/nginx/nginx.conf
    NGINX_IMAGE:
      from_secret: NGINX_IMAGE
    NGINX_TAG:
      from_secret: NGINX_TAG
    REFDATA_API_URL:
      from_secret: STAGING_REFDATA_API_URL
    RORO_V2_VIEW_ENABLED: 'false'
  when:
    event:
    - promote
    ref:
    - refs/tags/*
    target:
    - staging

- name: deploy_to_production
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export CERBERUS_UI_TAG=$${DRONE_COMMIT_SHA}
  - echo -e $${KUBE_CA_CERT} > k8s.crt
  - export KUBE_CERTIFICATE_AUTHORITY="$${PWD}/k8s.crt"
  - kd --file kube/cert.yml
  - kd --file kube/network-policy.yml
  - kd --file kube/service.yml
  - kd --file kube/deployment.yml --timeout=5m
  - kd --file kube/ingress.yml
  environment:
    CERBERUS_UI_IMAGE: quay.io/ukhomeofficedigital/cerberus-ui-service
    CERBERUS_UI_PORT: 8080
    CERBERUS_UI_SERVICE_NAME:
      from_secret: PRODUCTION_CERBERUS_UI_SERVICE_NAME
    CERBERUS_UI_URL:
      from_secret: PRODUCTION_CERBERUS_UI_SERVICE_URL
    CERBERUS_WORKFLOW_SERVICE_NAME:
      from_secret: WORKFLOW_SERVICE_NAME
    CERBERUS_WORKFLOW_SERVICE_NAMESPACE:
      from_secret: PRODUCTION_KUBE_NAMESPACE_COP_CERBERUS
    COP_TARGETING_API_ENABLED: 'false'
    COP_TARGETING_API_NAMESPACE:
      from_secret: PRODUCTION_KUBE_NAMESPACE_COP_CERBERUS
    COP_TARGETING_API_SERVICE_NAME:
      from_secret: PRODUCTION_COP_TARGETING_API_SERVICE_NAME
    DEPLOY_ENV: production
    FILE_UPLOAD_SERVICE_URL:
      from_secret: PRODUCTION_FILE_UPLOAD_SERVICE_URL
    FORM_API_URL:
      from_secret: PRODUCTION_API_FORM_URL
    KEYCLOAK_AUTH_URL:
      from_secret: PRODUCTION_KEYCLOAK_URL
    KEYCLOAK_CLIENT_ID:
      from_secret: PRODUCTION_CERBERUS_UI_SERVICE_KEYCLOAK_CLIENT_ID
    KEYCLOAK_REALM:
      from_secret: PRODUCTION_KEYCLOAK_REALM
    KUBE_CA_CERT:
      from_secret: PRODUCTION_KUBE_CA_CERT
    KUBE_NAMESPACE:
      from_secret: PRODUCTION_KUBE_NAMESPACE_COP_CERBERUS
    KUBE_SERVER:
      from_secret: PRODUCTION_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: PRODUCTION_CERBERUS_KUBE_TOKEN
    NGINX_CONFIG_FILE: /etc/nginx/nginx-prod.conf
    NGINX_IMAGE:
      from_secret: NGINX_IMAGE
    NGINX_TAG:
      from_secret: NGINX_TAG
    REFDATA_API_URL:
      from_secret: PRODUCTION_REFDATA_API_URL
    RORO_V2_VIEW_ENABLED: 'false'
  when:
    event:
    - promote
    ref:
    - refs/tags/*
    target:
    - production

- name: notify
  pull: if-not-exists
  image: plugins/slack
  settings:
    channel: cop-deployments
    template: "{{#build.deployTo}}\n  *{{repo.name}} - Build {{build.number}} - {{uppercasefirst build.deployTo}} - {{uppercase build.status}}*\n  {{build.link}}\n{{else}}\n  *{{repo.name}} - Build {{build.number}} - Development - {{uppercase build.status}}*\n  {{build.link}}\n{{/build.deployTo}}\n"
    username: Drone Build Watcher
  environment:
    SLACK_WEBHOOK:
      from_secret: SLACK_WEBHOOK
  when:
    event:
    - promote
    ref:
    - refs/tags/*
    status:
    - success
    - failure

services:
- name: docker
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

- name: anchore-submission-server
  pull: always
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
  commands:
  - /run.sh server

...
